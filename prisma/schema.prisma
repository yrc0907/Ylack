// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String      @id @default(cuid())
  name          String?
  username      String      @unique
  password      String
  image         String?     // 用户头像URL
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  sessions      Session[]
  workspaces    WorkspaceMember[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Workspace {
  id          String      @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  members     WorkspaceMember[]
  channels    Channel[]
}

model WorkspaceMember {
  id          String    @id @default(cuid())
  role        String    @default("MEMBER") // OWNER, ADMIN, MEMBER
  userId      String
  workspaceId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, workspaceId])
}

model Channel {
  id          String    @id @default(cuid())
  name        String
  description String?
  type        String    @default("PUBLIC") // PUBLIC, PRIVATE, DM
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
